Y[,i]=beta0+beta1*X+epsilon  # Generate data points
mod=lm(Y[,i]~X) # Fit the data using lm()
coeff_matrix_lm[,i]=mod$coefficients # Extract coefficients
sigma_matrix_lm[i]=summary(mod)$sigma # Extract sigmas
p_matrix_lm[i]=extractPVal(mod) # Extract P Value
anovaResults=data.frame(levels=rep(seq(0,nLevels-1,1),each=N/nLevels),YVal=Y[,i])
aovMod = aov(anovaResults$YVal~as.factor(anovaResults$levels))
coeff_matrix_aov[,i]=aovMod$coefficients
sigma_matrix_aov[i]=sigma(aovMod)
p_matrix_aov[i]=summary(aovMod)[[1]][["Pr(>F)"]][1]
}
# Calculate the averages of the simulations
averageb0_reg = mean(coeff_matrix_lm[1])
averageb1_reg = mean(coeff_matrix_lm[2])
averagep_reg = mean(p_matrix_lm)
significantP_reg = length(which(p_matrix_lm<0.05))
averageb0_aov = mean(coeff_matrix_aov[1])
averageb1_aov = mean(coeff_matrix_aov[2])
averagep_aov = mean(p_matrix_aov)
significantP_aov = length(which(p_matrix_aov<0.05))
# Compare the two parameters and P Values between lm() and aov()
linearParameters = c(averageb0_reg, averageb1_reg,averagep_reg,significantP_reg)
anovaParameters = c(averageb0_aov, averageb1_aov,averagep_aov,significantP_aov)
comparison_III = cbind(linearParameters,anovaParameters)
dimnames(comparison_III)[[1]]=c("Beta 0", "Beta 1", "P Value","Num Significant P")
paramComparison = cbind(paramComparison, sigma, comparison_III)
##########################################################################################################
# Declare Linear Regression Matrices for custom nll function
Y_nll=matrix(rep(N*Nsim),nrow=N,ncol=Nsim) # Create our Y matrix
coeff_matrix_lm_nll=matrix(rep(2*Nsim),nrow=2,ncol=Nsim) # Create our coefficent matrix
sigma_matrix_lm_nll=matrix(rep(Nsim),nrow=1,ncol=Nsim) # Create our sigma matrix
p_matrix_lm_nll=matrix(rep(Nsim),nrow=1,ncol=Nsim) # Create our p value matrix
# Declare Anova matrices for custom nll function
coeff_matrix_aov_nll=matrix(rep(nLevels*Nsim),nrow=nLevels,ncol=Nsim) # Create our coefficent matrix for aov
sigma_matrix_aov_nll=matrix(rep(Nsim),nrow=1,ncol=Nsim) # Create our sigma matrix for aov
p_matrix_aov_nll=matrix(rep(Nsim),nrow=1,ncol=Nsim) # Create our p value matrix for aov
# running the simulations using custom nll() functions
for (i in 1:Nsim){
epsilon=rnorm(N,mean=0,sd=sigma) # Normalized error
Y_nll[,i]=beta0+beta1*X+epsilon  # Generate data points
mod_nll=superNll(X,Y[,i],nLevels = 2,nExpUnits = N,anova = FALSE) # Use nll to obtain parameter estimates for linear regression
coeff_matrix_lm_nll[,i]=mod_nll$coefficients # Extract coefficients
sigma_matrix_lm_nll[i]=mod_nll$sigma # Extract sigmas
p_matrix_lm_nll[i]=mod_nll$pValue # Extract P Value
anovaResults=data.frame(levels=rep(seq(0,nLevels-1,1),each=N/nLevels),YVal=Y[,i]) # set up anova data frame and bin data
aovMod_nll = superNll(anovaResults$levels, anovaResults$YVal, nLevels, N,anova = TRUE) # use nll to obtain parameter estimates from anova regression
coeff_matrix_aov_nll[,i]=aovMod_nll$coefficients # Extract coefficients
sigma_matrix_aov_nll[i]=aovMod_nll$sigma # Extract sigmas
p_matrix_aov_nll[i]=aovMod_nll$pValue # Extract p values
}
# Calculate the averages of the simulations
averageb0_reg_nll = mean(coeff_matrix_lm_nll[1])
averageb1_reg_nll = mean(coeff_matrix_lm_nll[2])
averagep_reg_nll = mean(p_matrix_lm_nll)
significantP_reg_nll = length(which(p_matrix_lm_nll<0.05))
averageb0_aov_nll = mean(coeff_matrix_aov_nll[1])
averageb1_aov_nll = mean(coeff_matrix_aov_nll[2])
averagep_aov_nll = mean(p_matrix_aov_nll)
significantP_aov_nll = length(which(p_matrix_aov_nll<0.05))
# Compare the two parameters and P Values
linearParameters_nll = c(averageb0_reg_nll, averageb1_reg_nll,averagep_reg_nll,significantP_reg_nll)
anovaParameters_nll = c(averageb0_aov_nll, averageb1_aov_nll,averagep_aov_nll,significantP_aov_nll)
comparison_III_nll = cbind(linearParameters_nll,anovaParameters_nll)
dimnames(comparison_III_nll)[[1]]=c("Beta 0", "Beta 1", "P Value","Num Significant P")
paramComparison_nll = cbind(paramComparison_nll, sigma, comparison_III_nll)
# Combine all P Values for each MLLE and LSE run
pMatrixRun[,1] = p_matrix_lm
pMatrixRun[,2] = p_matrix_aov
pMatrixRun[,3] = p_matrix_lm_nll
pMatrixRun[,4] = p_matrix_aov_nll
pMatrixRun[,5] = sigma
pMatrixRun[,6] = nLevels
pMatrixAll = cbind(pMatrixAll, pMatrixRun)
}
}
# Extract the two level comparison data for lm() vs. aov()
twoLevelANOVA = cbind(paramComparison[,1:24])
# Extract the four level comparison data for lm() vs. aov()
fourLevelANOVA = cbind(paramComparison[,25:48])
# Extract the eight level comparison data for lm() vs. aov()
eightLevelANOVA = cbind(paramComparison[,49:72])
# Extract the two level comparison data for linear regression nll vs. anova nll
twoLevelANOVA_nll = cbind(paramComparison_nll[,1:24])
# Extract the four level comparison data for linear regression nll vs. anova nll
fourLevelANOVA_nll = cbind(paramComparison_nll[,25:48])
# Extract the eight level comparison data for linear regression nll vs. anova nll
eightLevelANOVA_nll = cbind(paramComparison_nll[,49:72])
# Plot the histogram of the p-values for lm() vs. aov() for 8 levels and sigma = 24 (MSE)
# LSE For linear regression p distribution
ggplot(data.frame(pVal=t(p_matrix_lm)), aes(x=pVal))+
geom_histogram(binwidth = 0.1, color="white",fill="blue")+
theme_classic()+
xlab("p-Values")+
ylab("Frequency")+
ggtitle(label="p-Value distribution of lm()")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)
# LSE For ANOVA p distribution
ggplot(data.frame(pVal=t(p_matrix_aov)), aes(x=pVal))+
geom_histogram(binwidth = 0.1, color="white",fill="blue")+
theme_classic()+
xlab("p-Values")+
ylab("Frequency")+
ggtitle(label="p-Value distribution of aov()")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)
# Plot the histogram of the p-values for linear nll vs. anova nll for 8 levels and sigma = 24 (MLLE)
# MLLE For linear regression p distribution
ggplot(data.frame(pVal=t(p_matrix_lm_nll)), aes(x=pVal))+
geom_histogram(binwidth = 0.1, color="white",fill="blue")+
theme_classic()+
xlab("p-Values")+
ylab("Frequency")+
ggtitle(label="p-Value distribution of linear regresssion nll()")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)
# MLLE For ANOVA p distribution
ggplot(data.frame(pVal=t(p_matrix_aov_nll)), aes(x=pVal))+
geom_histogram(binwidth = 0.1, color="white",fill="blue")+
theme_classic()+
xlab("p-Values")+
ylab("Frequency")+
ggtitle(label="p-Value distribution of anova nll()")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)
# Plot the histogram of the p-values for lm() vs. aov() for 2 levels and sigma = 1 (LSE)
# LSE For linear regression p distribution
ggplot(data.frame(pVal=-log10(pMatrixAll[,1])), aes(x=pVal))+
geom_histogram(binwidth = 0.1, color="white",fill="blue")+
theme_classic()+
xlab("-log10(p-Values)")+
ylab("Frequency")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)+
xlim(min(-log10(pMatrixAll[,1])),max(-log10(pMatrixAll[,1])))
# LSE For ANOVA p distribution
ggplot(data.frame(pVal=-log10(pMatrixAll[,2])), aes(x=pVal))+
geom_histogram(binwidth = 0.05, color="white",fill="blue")+
theme_classic()+
xlab("-log10(p-Values)")+
ylab("Frequency")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)+
xlim(min(-log10(pMatrixAll[,2])),max(-log10(pMatrixAll[,2])))
# Plot the histogram of the p-values for custom nll for Linear regression and ANOVA for 2 levels and sigma = 1 (MLLE)
# MLLE For linear regression p distribution
# NOTE: 1e24 was added to all values due to the values being below the machine computable epsilon value
ggplot(data.frame(pVal=-log10(pMatrixAll[,3]+1e-24)), aes(x=pVal))+
geom_histogram(binwidth = 0.1, color="white",fill="blue")+
theme_classic()+
xlab("-log10(p-Values)")+
ylab("Frequency")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)+
xlim(23,25)
# MLLE For ANOVA p distribution
ggplot(data.frame(pVal=-log10(pMatrixAll[,4])), aes(x=pVal))+
geom_histogram(binwidth = 0.05, color="white",fill="blue")+
theme_classic()+
xlab("-log10(p-Values)")+
ylab("Frequency")+
theme(plot.title=element_text(hjust=0.5))+
geom_vline(aes(xintercept=mean(pVal)),color="red",size=1.2)+
xlim(min(-log10(pMatrixAll[,4])),max(-log10(pMatrixAll[,4])))
View(paramComparison)
x=c(12,3,1,3,4,12,343,23,42,2,4,1,4,4,56)
count=0
count2=0
for (i in 1:length(x)) {
if (x[i]<=10){
count=count+1
} else {
count2=count2+1
}
}
print(c("There are this many values less than 10 in x",count))
print(c("There are this many values greater than 10 in x",count2))
x=c(12,3)
count=0
count2=0
for (i in 1:length(x)) {
if (x[i]<=10){
count=count+1
} else {
count2=count2+1
}
}
print(c("There are this many values less than 10 in x",count))
print(c("There are this many values greater than 10 in x",count2))
x=c(12,3,12,12,4,23,43,12,34,56)
y=c(12,23,34,12,3,12,34,1,2,43)
library(ggplot2)
ggplot(aes(x=x,y=y))+geom_point()
data<-cbind(x,y)
ggplot(data,aes(x=x,y=y))+geom_point()
data<-as.data.frame(cbind(x,y))
ggplot(data,aes(x=x,y=y))+geom_point()
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="loess")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="lm")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="nlm")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="exponential")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="power")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="auto")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="glm")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method="gam")
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method=loess)
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method=gam)
ggplot(data,aes(x=x,y=y))+geom_point()+geom_smooth(method=gam)
rm(list = ls())
myNumber=sample(x=1:50,size=1)
correct=0
guess=readline(promp="Guess:")
correct=0
while(correct==0){
#prompt the user for a guess
guess=readline(promp="Guess:")
if (guess<myNumber) {
print("Higher")
} else if (guess>myNumber) {
print("Lower")
} else {
print("Correct")
correct=1
}
}
myNumber=sample(x=1:50,size=1)
correct=0
count=0
while (count<5) {
while(correct==0){
#prompt the user for a guess
guess=readline(promp="Guess:")
if (guess<myNumber) {
print("Higher")
count=count+1
} else if (guess>myNumber) {
print("Lower")
count=count+1
} else {
print("Correct!")
correct=1
}
}
}
Temp<-matrix(nrow=1008,ncol=2)
Temp[,1]<-rnorm(1008,mean=10,sd=0.5)
while (any(Temp[,1]<8 | Temp[,1]>12)) {
Temp[,1]<rnorm(1008,mean=10,sd=0.5)
}
Temp<-matrix(nrow=1008,ncol=2)
Temp[,1]<-rnorm(1008,mean=10,sd=0.5)
while (any(Temp[,1]<8 | Temp[,1]>12)) {
Temp[,1]<rnorm(1008,mean=10,sd=0.5)
}
Temp[,2]<-rnorm(1008,mean=10,sd=0.5)
while (any(Temp[,2]<8 | Temp[,2]>12)) {
Temp[,2]<rnorm(1008,mean=10,sd=0.5)
}
i=as.numeric(sample(1008,size=504))
for (k in 1:1008) {
if (any(i==k)) {
Temp[k,2]<-rnorm(1,mean=13,sd=0.5)
} else {
Temp[k,2]=Temp[k,2]
}
}
Food<-matrix(nrow=1008,ncol=3)
Food[,1]<-rnorm(1008,mean=0.5,sd=0.1)
while (any(Food[,1]<0 | Food[,1]>2)) {
Food[,1]<rnorm(1008,mean=0.5,sd=0.1)
}
Food[,2]<-rnorm(1008,mean=2.5,sd=0.5)
while (any(Food[,2]<0 | Food[,2]>5)) {
Food[,2]<rnorm(1008,mean=2.5,sd=0.5)
}
#Want to use the same random i points as for temperature
for (k in 1:1008) {
if (any(i==k)) {
Food[k,3]<-rnorm(1,mean=0.5,sd=0.1)
} else {
Food[k,3]<-rnorm(1,mean=2.5,sd=0.5)
}
}
Act<-matrix(nrow=1008,ncol=4)
Act[,1]<-rnorm(1008,mean=1,sd=0.1)
while (any(Act[,1]<0 | Act[,1]>2)) {
Act[,1]<rnorm(1008,mean=0.5,sd=0.1)
}
Act[,2]<-rnorm(1008,mean=5,sd=0.5)
while (any(Act[,2]<0 | Act[,2]>10)) {
Act[,2]<rnorm(1008,mean=5,sd=0.5)
}
#Want to use the same random i points as for temperature
for (k in 1:1008) {
if (any(i==k)) {
Act[k,3]<-rnorm(1,mean=1,sd=0.1)
} else {
Act[k,3]<-rnorm(1,mean=5,sd=0.5)
}
}
View(Act)
View(Temp)
for (k in 2:1009) {
prev=Temp[k-1,2]
if (abs(Temp[k,2]-prev)>1.5) {
Act[k-1,4]=rnorm(1,mean=5,sd=0.5)
} else {
Act[k-1,4]=rnorm(1,mean=1,sd=0.1)
}
}
for (k in 2:1008) {
prev=Temp[k-1,2]
if (abs(Temp[k,2]-prev)>1.5) {
Act[k-1,4]=rnorm(1,mean=5,sd=0.5)
} else {
Act[k-1,4]=rnorm(1,mean=1,sd=0.1)
}
}
View(Act)
for (k in 2:1008) {
prev=Temp[k-1,2]
if (abs(Temp[k,2]-prev)>1.5) {
Act[k-1,4]=rnorm(1,mean=5,sd=0.5)
} else {
Act[k-1,4]=rnorm(1,mean=1,sd=0.1)
} Act[1008,4]=rnorm(1,mean=1,sd=0.1)
}
for (k in 2:1008) {
prev=Temp[k-1,2]
if (abs(Temp[k,2]-prev)>1.5) {
Act[k-1,4]=rnorm(1,mean=5,sd=0.5)
} else {
Act[k-1,4]=rnorm(1,mean=1,sd=0.1)
}
Act[1008,4]=rnorm(1,mean=1,sd=0.1)
}
install.packages("citer")
install.packages("citr")
total=495
20*5+3*12
total-(20*5+3*12)
us=(20*5+3*12)
total-us
12*6+4*7
12*7+4*7
12*7+5*7
12*8+5*7
12*8.5+5*7
12*8+8*7
12*7+7*7
136/19
x=150/19
12*8+7*6
x=153.5/19
12*8+7*5.5
getwd()
setwd()
getSrcDirectory()
getSrcDirectory()[1]
getSrcFilename()
getwd()
file.path()
setwd("~/Documents/Data Science/ FINAL/datascience_final")
knitr::opts_chunk$set(echo = TRUE, dev = "cairo_pdf")
library(ggplot2)
library(tidyverse)
library(magrittr)
library(readr)
library(sf)
library(ggspatial)
library(gridExtra)
theme_set(theme_bw(base_size=22))
seasonPal2<-c("deepskyblue4","yellowgreen","goldenrod1","orange3") #BEST
load("Data/prey19.RData")
View(prey19)
#How many are in each of the prey levels
itemDetails%>%
ungroup()%>%
pivot_longer(cols=starts_with("total"))%>%
dplyr::select(name,value)%>%distinct()%>%
mutate(name=factor(name))%>%
ggplot()+
geom_col(aes(fct_reorder(name,value),value,fill=fct_reorder(name,value)),color="black")+
scale_fill_brewer(palette="PuRd",guide="none")+
scale_y_continuous(name="Number of unique items")+
scale_x_discrete(name="Prey Resolution",
labels=c("General","cf. Garrison\nand Link, 2000","Analytical","Collection","Species"))
#How many different levels are there in all the different levels
itemDetails<-prey19%>%
mutate(total_pynam=n_distinct(pynam),
total_gennam=n_distinct(gensci),
total_analnam=n_distinct(analsci),
total_colnam=n_distinct(collsci),
total_glnam=n_distinct(gl_prey))%>%
group_by(gensci)%>%
mutate(gen_pynam=n_distinct(pynam),
gen_analnam=n_distinct(analsci),
gen_colnam=n_distinct(collsci))%>%
ungroup()%>%
group_by(analsci)%>%
mutate(anal_pynam=n_distinct(pynam),
anal_colnam=n_distinct(collsci))%>%
ungroup()%>%
group_by(collsci)%>%
mutate(coll_pynam=n_distinct(pynam))%>%
dplyr::select(pynam,gensci,analsci,collsci,total_pynam:coll_pynam)%>%unique()
#The categories from Garrison and Link, 2000
gl_preycats<-read.csv("Data/GarrisonLink_preyCats.csv")%>%
mutate(matchingCats=gsub("p\\.","",Scientific.name),
matchingCats=gsub("crabs","crab",matchingCats),
matchingCats=gsub("Gammaridae","Gammaridea",matchingCats),
matchingCats=gsub("Cnidarians","Cnidaria",matchingCats))
prey19<-prey19%>%
mutate(INgen=ifelse(str_to_sentence(gensci) %in% gl_preycats$matchingCats,1,0),
INanal=ifelse(str_to_sentence(analsci) %in% gl_preycats$matchingCats,1,0),
INcoll=ifelse(str_to_sentence(collsci) %in% gl_preycats$matchingCats,1,0),
INpy=ifelse(str_to_sentence(pynam) %in% gl_preycats$matchingCats,1,0))
prey19<-prey19%>%
mutate(INgen=ifelse(str_to_sentence(gensci) %in% gl_preycats$matchingCats,1,0),
INanal=ifelse(str_to_sentence(analsci) %in% gl_preycats$matchingCats,1,0),
INcoll=ifelse(str_to_sentence(collsci) %in% gl_preycats$matchingCats,1,0),
INpy=ifelse(str_to_sentence(pynam) %in% gl_preycats$matchingCats,1,0))
prey19<-prey19%>%
mutate(INnum=rowSums(prey19[,c("INgen","INanal","INcoll","INpy")]),
gl_prey=ifelse(INnum==4,str_to_sentence(pynam), #STEP 1
ifelse(INnum==3&INpy==1,str_to_sentence(pynam),
ifelse(INnum==3&INpy==0,str_to_sentence(collsci),
ifelse(INnum==2&INpy==1,str_to_sentence(pynam),
ifelse(INnum==2&INgen==1,str_to_sentence(analsci),
ifelse(INnum==2&INgen==0&INpy==0,str_to_sentence(collsci),
ifelse(INnum==1&INgen==1,str_to_sentence(gensci),
ifelse(INnum==1&INanal==1,str_to_sentence(analsci),
ifelse(INnum==1&INcoll==1,str_to_sentence(collsci),
ifelse(INnum==1&INpy==1,str_to_sentence(pynam),
ifelse(INnum==0&pynam=="EMPTY","Empty",NA))))))))))),
gl_prey=ifelse(pynam %in% c("UROPHYCIS CHUSS","UROPHYCIS TENUIS","UROPHYCIS REGIA"),"Other hakes", #STEP 2
ifelse(analsci %in% c("GADIDAE","BREGMACEROTIDAE","EUCLICHTHYIDAE","LOTIDAE","MACROURIDAE",
"MELANONIDAE","MERLUCCIIDAE","MORIDAE","MURAENOLEPIDIDAE","PHYCIDAE") &
is.na(gl_prey),"Gadiformes", #STEP 3a
ifelse(analsci %in% c("PLEURONECTIDAE","PSETTODIDAE","CITHARIDAE","SCOPHTHALMIDAE","PARALICHTHYIDAE",
"BOTHIDAE","PARALICHTHODIDAE","POECILOPSETTIDAE","RHOMBOSOLEIDAE",
"ACHIROPSETTIDAE","SAMARIDAE","ACHIRIDAE","SOLEIDAE","CYNOGLOSSIDAE") &
is.na(gl_prey), "Pleuronectiformes", #STEP 3b
ifelse(gensci=="FISH" & is.na(gl_prey),"Other fish", #STEP 4
ifelse((gensci %in% c("UROCHORDATA","BRACHIOPODA","BRYOZOA","CHAETOGNATHA","PORIFERA") |
collsci %in% c("ARTHROPODA","INSECTA","HEMICHORDATA","LIMULUS POLYPHEMUS",
"APHRODITIDAE","OLIGOCHAETA","HIRUDENEA","PYCNOGONIDA")) &
is.na(gl_prey),"Other invertebrates", #STEP 5
ifelse(analsci %in% c("CEPHALOCHORDATA"),"Other", #STEP 6
ifelse(collsci %in% c("OSTRACODA","CUMACEA","STOMATOPODA","PENAEIDAE"),
"Crustacean shrimp", #STEP 7
ifelse(analsci %in% c("CIRRIPEDIA","COPEPODA") |
pynam %in% c("DECAPODA","DECAPODA EGGS","DECAPODA LARVAE"),"Crustacea", #STEP 8
ifelse(collsci %in% c("HOMARUS AMERICANUS","CALLINECTES SAPIDUS","DECAPODA LARVAE","SCYLLARIDAE") &
is.na(gl_prey), "Decapoda crab", #STEP 9
ifelse(analsci=="EUPHAUSIACEA","Euphausiidae",gl_prey))))))))))) #STEP 10
#How many different levels are there in all the different levels
itemDetails<-prey19%>%
mutate(total_pynam=n_distinct(pynam),
total_gennam=n_distinct(gensci),
total_analnam=n_distinct(analsci),
total_colnam=n_distinct(collsci),
total_glnam=n_distinct(gl_prey))%>%
group_by(gensci)%>%
mutate(gen_pynam=n_distinct(pynam),
gen_analnam=n_distinct(analsci),
gen_colnam=n_distinct(collsci))%>%
ungroup()%>%
group_by(analsci)%>%
mutate(anal_pynam=n_distinct(pynam),
anal_colnam=n_distinct(collsci))%>%
ungroup()%>%
group_by(collsci)%>%
mutate(coll_pynam=n_distinct(pynam))%>%
dplyr::select(pynam,gensci,analsci,collsci,total_pynam:coll_pynam)%>%unique()
#How many different levels are there in all the different levels
itemDetails<-prey19%>%
mutate(total_pynam=n_distinct(pynam),
total_gennam=n_distinct(gensci),
total_analnam=n_distinct(analsci),
total_colnam=n_distinct(collsci),
total_glnam=n_distinct(gl_prey))%>%
group_by(gensci)%>%
mutate(gen_pynam=n_distinct(pynam),
gen_analnam=n_distinct(analsci),
gen_colnam=n_distinct(collsci))%>%
ungroup()%>%
group_by(analsci)%>%
mutate(anal_pynam=n_distinct(pynam),
anal_colnam=n_distinct(collsci))%>%
ungroup()%>%
group_by(collsci)%>%
mutate(coll_pynam=n_distinct(pynam))%>%
dplyr::select(pynam,gensci,analsci,collsci,total_pynam:coll_pynam)%>%unique()
itemDetails<-itemDetails[,c("gensci","analsci","collsci","pynam","total_gennam","total_glnam","total_analnam","total_colnam",
"total_pynam","gen_analnam","gen_colnam","gen_pynam","anal_colnam","anal_pynam","coll_pynam")]
View(itemDetails)
View(itemDetails)
table(prey19)
table(prey19$fhdat)
nrow(filter(uniquePrey19,fhdat=="P")/nrow(uniquePrey19)
)
nrow(filter(uniquePrey19,fhdat=="P"))/nrow(uniquePrey19)
uniquePrey19<-prey19%>%
dplyr::select(cruise6,station,svspp,pdsex,pdid,fhdat,pdcomnam,pdscinam,pdlen,pdwgt,sizecat,pdgutw,pdgutv,declat,declon,month,day,year,season,geoarea)%>%
distinct()%>%
mutate(cruise6=as(cruise6,"character"),pdsex=as.character(pdsex),
station=as.character(str_sub(paste0("0000",station),-4,-1)))
nrow(filter(uniquePrey19,fhdat=="P"))/nrow(uniquePrey19)
nrow(filter(uniquePrey19,fhdat=="P"))
nrow(filter(uniquePrey19,fhdat=="P"))/nrow(uniquePrey19)*100
citr:::insert_citation()
